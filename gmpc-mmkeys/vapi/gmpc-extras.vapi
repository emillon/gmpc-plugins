/* gmpc-extra.vapi generated by valac, do not modify. */

[CCode (cprefix = "Gmpc", lower_case_cprefix = "gmpc_")]
namespace Gmpc {
	[CCode (cprefix = "GmpcEasy", lower_case_cprefix = "gmpc_easy_")]
	namespace Easy {
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class Command : Gmpc.Plugin.Base {
			[CCode (cheader_filename = "gmpc-extras.h")]
			public delegate void Callback (void* data, string param);
			public Command ();
			public uint add_entry (string name, string pattern, string hint, Gmpc.Easy.Command.Callback* callback, void* userdata);
			public override bool get_enabled ();
			public override unowned string get_name ();
			public override unowned int[] get_version ();
			public static void help_window (void* data, string? param);
			public static void help_window_destroy (Gtk.Dialog window, int response);
			public void popup ();
			public override void set_enabled (bool state);
		}
	}
	[CCode (cprefix = "GmpcFavorites", lower_case_cprefix = "gmpc_favorites_")]
	namespace Favorites {
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class Button : Gtk.EventBox {
			public Button ();
			public void set_song (MPD.Song? song);
		}
	}
	[CCode (cprefix = "GmpcListstore", lower_case_cprefix = "gmpc_liststore_")]
	namespace Liststore {
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class Sort : Gtk.ListStore, Gtk.TreeDragSource, Gtk.TreeDragDest {
			public Sort ();
		}
	}
	[CCode (cprefix = "GmpcMenuItem", lower_case_cprefix = "gmpc_menu_item_")]
	namespace MenuItem {
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class Rating : Gtk.MenuItem {
			public Gtk.VBox hbox;
			public Gmpc.Rating rating;
			public Rating (MPD.Server server, MPD.Song song);
			public int get_rating ();
		}
	}
	[CCode (cprefix = "GmpcMetaData", lower_case_cprefix = "gmpc_meta_data_")]
	namespace MetaData {
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class EditWindow : Gtk.Window {
			public EditWindow (MPD.Song song, Gmpc.MetaData.Type type);
			public void b_cancel ();
			public void callback (void* handle, string? plugin_name, GLib.List<Gmpc.MetaData.Item>? list);
			public void destroy_popup (Gtk.Button button);
			public void image_downloaded (Gmpc.AsyncDownload.Handle handle, Gmpc.AsyncDownload.Status status);
			public void refresh_query (Gtk.Button button);
			public void store_image (Gmpc.AsyncDownload.Handle handle, Gmpc.AsyncDownload.Status status);
		}
	}
	[CCode (cprefix = "GmpcMpdData", lower_case_cprefix = "gmpc_mpd_data_")]
	namespace MpdData {
		[CCode (cprefix = "GmpcMpdDataTreeview", lower_case_cprefix = "gmpc_mpd_data_treeview_")]
		namespace Treeview {
			[CCode (cheader_filename = "gmpc-extras.h")]
			public class Tooltip : Gtk.Window {
				public Gmpc.MetaData.Type mtype;
				public string? request_artist;
				public Tooltip (Gtk.TreeView pw, Gmpc.MetaData.Type type);
			}
		}
	}
	[CCode (cprefix = "GmpcPlugin", lower_case_cprefix = "gmpc_plugin_")]
	namespace Plugin {
		[CCode (cheader_filename = "gmpc-extras.h")]
		public abstract class Base : GLib.Object {
			public int id;
			public string path;
			public int plugin_type;
			public weak string translation_domain;
			public Base ();
			public virtual bool get_enabled ();
			public abstract unowned string get_name ();
			public abstract unowned int[] get_version ();
			public virtual void save_yourself ();
			public virtual void set_enabled (bool state);
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class DatabaseUpdateTracker : Gmpc.Plugin.Base {
			public int[] version;
			public DatabaseUpdateTracker ();
			public override unowned string get_name ();
			public override unowned int[] get_version ();
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class MetadataPrefetcher : Gmpc.Plugin.Base {
			public int[] version;
			public MetadataPrefetcher ();
			public override unowned string get_name ();
			public override unowned int[] get_version ();
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class Mockup : Gmpc.Plugin.Base, Gmpc.Plugin.BrowserIface {
			public const int[] version;
			public Mockup ();
			public override unowned string get_name ();
			public override unowned int[] get_version ();
			public override void save_yourself ();
			public override void set_enabled (bool state);
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public interface BrowserIface : Gmpc.Plugin.Base {
			public abstract void browser_add (Gtk.Widget category_tree);
			public virtual int browser_add_go_menu (Gtk.Menu menu);
			public virtual int browser_option_menu (Gtk.Menu menu);
			public abstract void browser_selected (Gtk.Container container);
			public abstract void browser_unselected (Gtk.Container container);
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public interface MetaDataIface : Gmpc.Plugin.Base {
			public abstract void get_data (MPD.Song song, Gmpc.MetaData.Type type, Gmpc.Plugin.MetaDataCallback callback);
			public abstract int get_priority ();
			public abstract void set_priority (int priority);
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public interface PreferencesIface : Gmpc.Plugin.Base {
			public abstract void preferences_pane_construct (Gtk.Container container);
			public abstract void preferences_pane_destroy (Gtk.Container container);
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public interface SongListIface : Gmpc.Plugin.Base {
			public abstract int song_list (Gtk.Widget tree, Gtk.Menu menu);
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public interface ToolMenuIface : Gmpc.Plugin.Base {
			public abstract int tool_menu_integration (Gtk.Menu menu);
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public delegate void MetaDataCallback (GLib.List<Gmpc.MetaData.Item> list);
	}
	[CCode (cprefix = "GmpcSong", lower_case_cprefix = "gmpc_song_")]
	namespace Song {
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class Links : Gtk.Frame {
			[CCode (cprefix = "GMPC_SONG_LINKS_TYPE_", cheader_filename = "gmpc-extras.h")]
			public enum Type {
				ARTIST,
				ALBUM,
				SONG
			}
			public Links (Gmpc.Song.Links.Type type, MPD.Song song);
		}
	}
	[CCode (cprefix = "GmpcUrlFetching", lower_case_cprefix = "gmpc_url_fetching_")]
	namespace UrlFetching {
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class Gui : GLib.Object {
			[CCode (cheader_filename = "gmpc-extras.h")]
			public delegate void ParseUrl (Gmpc.UrlFetching.Gui gui, string url);
			[CCode (cheader_filename = "gmpc-extras.h")]
			public delegate bool ValidateUrl (Gmpc.UrlFetching.Gui gui, string url);
			public Gui (Gmpc.UrlFetching.Gui.ParseUrl parse_callback, Gmpc.UrlFetching.Gui.ValidateUrl validate_callback, GLib.DestroyNotify destroy_cb);
			public void set_completed ();
			public void set_error (string error_message);
			public void set_processing ();
			public void set_progress (double progress);
		}
	}
	[CCode (cprefix = "GmpcWidget", lower_case_cprefix = "gmpc_widget_")]
	namespace Widget {
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class More : Gtk.Frame {
			public More (string unique_id, string markup, Gtk.Widget child);
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class SimilarArtist : Gtk.Table {
			public SimilarArtist (MPD.Server server, MPD.Song song);
			public Gtk.Widget new_artist_button (string artist, bool in_db);
		}
		[CCode (cheader_filename = "gmpc-extras.h")]
		public class SimilarSongs : Gtk.Alignment {
			public SimilarSongs (MPD.Song song);
			public void update ();
		}
	}
	[CCode (cheader_filename = "gmpc-extras.h")]
	public class Connection : GLib.Object {
		public Connection ();
		public signal void connection_changed (MPD.Server mi, int connect);
		public signal void status_changed (MPD.Server mi, MPD.Status.Changed what);
	}
	[CCode (cheader_filename = "gmpc-extras.h")]
	public class Image : Gtk.EventBox {
		public Image ();
		public void clear_pixbuf ();
		public void set_pixbuf (Gdk.Pixbuf buf, bool border);
		public string? text { get; set; }
	}
	[CCode (cheader_filename = "gmpc-extras.h")]
	public class MetadataBrowser : Gmpc.Plugin.Base, Gmpc.Plugin.BrowserIface, Gmpc.Plugin.PreferencesIface {
		public const int[] version;
		public MetadataBrowser ();
		public override unowned string get_name ();
		public override unowned int[] get_version ();
		public Gtk.Widget metadata_box_show_song (MPD.Song song, bool show_controls);
		public override void save_yourself ();
		public void select_browser (Gtk.TreeView? tree);
		public void set_album (string artist, string album);
		public void set_artist (string artist);
		public void set_song (MPD.Song song);
	}
	[CCode (cheader_filename = "gmpc-extras.h")]
	public class PanedSizeGroup : GLib.Object {
		public PanedSizeGroup ();
		public void add_paned (Gtk.Paned paned);
	}
	[CCode (cheader_filename = "gmpc-extras.h")]
	public class Progress : Gtk.HBox {
		public bool _hide_text;
		public Progress ();
		public void set_time (uint total, uint current);
		public bool hide_text { get; set; }
	}
	[CCode (cheader_filename = "gmpc-extras.h")]
	public class Rating : Gtk.Frame {
		public Gtk.EventBox event_box;
		public Rating (MPD.Server server, MPD.Song song);
		public bool button_press_event_callback (Gtk.EventBox wid, Gdk.EventButton event);
		public void set_rating (int rating);
		public void update ();
	}
	[CCode (cheader_filename = "gmpc-extras.h")]
	public class TestPlugin : Gmpc.Plugin.Base, Gmpc.Plugin.ToolMenuIface, Gmpc.Plugin.SongListIface {
		public const int[] version;
		public TestPlugin ();
		public override bool get_enabled ();
		public override unowned string get_name ();
		public override unowned int[] get_version ();
		public void menu_activated_album (Gtk.MenuItem item);
		public override void save_yourself ();
		public override void set_enabled (bool state);
	}
}
